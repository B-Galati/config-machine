---
- name: Install packages
  become: true
  apt:
    cache_valid_time: 3600
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - man
      - linux-generic-hwe-18.04
      - xserver-xorg-hwe-18.04
      - lnav
      - stress
      - meld
      - bash-completion
      - screenfetch
      - htop
      - nmon
      - hdparm
      - xclip
      - smartmontools
      - sysbench
      - iotop
      - fio
      - multitail
      - git
      - git-extras
      - ssh
      - vim
      - vim-gui-common
      - zsh
      - tar
      - fonts-hack
      - unzip
      - netstat-nat
      - net-tools
      - powerline
      - tmux
      - openvpn
      - openssl
      - network-manager-openvpn-gnome
      - resolvconf
      - tzdata
      - locales
      - shellcheck
      - gnome-tweak-tool
      - gnome-shell-extensions
      - menulibre
      - apt-transport-https
      - ca-certificates
      - curl
      - imagemagick
      - gthumb
      - nautilus-image-converter
      - gir1.2-gtop-2.0
      - gir1.2-networkmanager-1.0
      - arc-theme
      - python-pip
      - ubuntu-make
      - keychain
      - postfix
      - mailutils
      - python-jmespath
      - ncdu
      - pandoc
      - libnss3-tools
      - gnupg2
      - entr
      - gdebi
      - chromium-browser
      - fonts-roboto
      - insomnia
      - wondershaper
      - chrome-gnome-shell
      - flameshot
      - jq
      - vlc

- name: Apply gnome config
  shell: |
    set -x

    # Reset shortcut for screenshot
    gsettings set org.gnome.settings-daemon.plugins.media-keys screenshot ''

    gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/']"

    # Use flameshot for screenshot and bind shortcut see https://askubuntu.com/questions/1036473/ubuntu-18-how-to-change-screenshot-application-to-flameshot
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ name 'flameshot'
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ command '/usr/bin/flameshot gui'
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ binding 'Print'

    # Set shortcut to mute mic
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/ name 'Toggle mic'
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/ command 'amixer set Capture toggle'
    gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/ binding 'Mail'

- name: 'Ensure /usr/local/bin belongs to {{ ansible_user }}'
  become: true
  file:
    path: /usr/local/bin
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    recurse: yes

- name: Install pip packages
  pip:
    name: '{{ packages }}'
    state: latest
    extra_args: --user
  vars:
    packages:
      - pip
      - awscli
      - s-tui
      - psutil
      - powerline-mem-segment
      - youtube-dl

- name: Firefox dev | Check for existing install
  stat:
    path: '/home/{{ ansible_user }}/.local/share/umake/web/firefox-dev'
  register: firefox_dev
  changed_when: False

- name: Firefox dev | Install
  shell: umake web firefox-dev /home/{{ ansible_user }}/.local/share/umake/web/firefox-dev --lang en-US
  when: not firefox_dev.stat.exists

- name: Croncape | Check for existing croncape install
  stat:
    path: '/usr/local/bin/croncape'
  register: croncape_install
  changed_when: False

- name: Croncape | Check croncape version to know if an update is needed or not
  command: '/usr/local/bin/croncape --version'
  register: croncape_installed_version
  when: 'croncape_install.stat.exists'
  changed_when: 'croncape_version not in croncape_installed_version.stdout'
  failed_when: False

- block:
    - name: Croncape | Download croncape
      get_url:
        url: https://github.com/symfonycorp/croncape/releases/download/{{ croncape_version }}/croncape_linux_amd64.tar.gz
        checksum: 'sha256:{{ croncape_archive_checksum }}'
        dest: /tmp/croncape_linux_amd64.tar.gz
        force: yes

    - name: Croncape | Install croncape
      unarchive:
        src: /tmp/croncape_linux_amd64.tar.gz
        dest: '/usr/local/bin'
        remote_src: yes
  when: not croncape_install.stat.exists or croncape_version not in croncape_installed_version.stdout

- name: gitlab-runner | Check for existing gitlab-runner install
  command: 'which gitlab-runner'
  register: gitlab_runner_install
  changed_when: False
  ignore_errors: True

- block:
    - name: gitlab-runner | Download gitlab-runner repository script
      get_url:
        url: https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh
        dest: /tmp/gitlab-script.deb.sh
        force: yes

    - name: gitlab-runner | Install gitlab-runner repository
      become: true
      shell: bash /tmp/gitlab-script.deb.sh
  when: gitlab_runner_install.failed

- name: gitlab-runner | Install
  become: true
  apt:
    cache_valid_time: 3600
    name: gitlab-runner
    state: present

- name: fzf | Clone repository
  git:
    repo: https://github.com/junegunn/fzf.git
    dest: ~/.fzf
    depth: 1

- name: fzf | Install
  shell: ~/.fzf/install --completion --64 --key-bindings --update-rc

- name: fd | Check for existing fd install
  stat:
    path: '/usr/bin/fd'
  register: fd_install
  changed_when: False

- name: fd | Check fd version to know if an update is needed or not
  command: '/usr/bin/fd --version'
  register: fd_installed_version
  when: 'fd_install.stat.exists'
  changed_when: 'fd_version not in fd_installed_version.stdout'
  failed_when: False

- block:
    - name: fd | Download and install
      become: true
      apt:
        deb: https://github.com/sharkdp/fd/releases/download/v{{ fd_version }}/fd_{{ fd_version }}_amd64.deb
  when: not fd_install.stat.exists or fd_version not in fd_installed_version.stdout

- name: bat | Check for existing bat install
  stat:
    path: '/usr/bin/bat'
  register: bat_install
  changed_when: False

- name: bat | Check bat version to know if an update is needed or not
  command: '/usr/bin/bat --version'
  register: bat_installed_version
  when: 'bat_install.stat.exists'
  changed_when: 'bat_version not in bat_installed_version.stdout'
  failed_when: False

- block:
    - name: bat | Download and install
      become: true
      apt:
        deb: https://github.com/sharkdp/bat/releases/download/v{{ bat_version }}/bat_{{ bat_version }}_amd64.deb
  when: not bat_install.stat.exists or bat_version not in bat_installed_version.stdout

- name: discord | Check for existing discord install
  command: dpkg-query -W discord
  register: discord_installed
  failed_when: false
  changed_when: false

- block:
    - name: discord | Download and install
      become: true
      apt:
        deb: https://discordapp.com/api/download?platform=linux&format=deb
  when: discord_installed.rc == 1

- name: keybase | Check for existing keybase install
  command: dpkg-query -W keybase
  register: keybase_installed
  failed_when: false
  changed_when: false

- block:
    - name: keybase | Download and install
      become: true
      apt:
        deb: https://prerelease.keybase.io/keybase_amd64.deb
  when: keybase_installed.rc == 1

- name: hexyl | Check hexyl version to know if an update is needed or not
  command: '/usr/bin/hexyl --version'
  register: hexyl_installed_version
  changed_when: hexyl_version not in hexyl_installed_version.stdout | default('')
  failed_when: False

- block:
    - name: hexyl | Download and install
      become: true
      apt:
        deb: https://github.com/sharkdp/hexyl/releases/download/v{{ hexyl_version }}/hexyl_{{ hexyl_version }}_amd64.deb
  when: hexyl_version not in hexyl_installed_version.stdout | default('')

- name: Remove useless packages
  become: true
  apt:
    purge: yes
    autoremove: yes

- name: Remove useless packages from the cache
  become: true
  apt:
    autoclean: yes

# Source https://github.com/sanduhrs/phpstorm-url-handler
- name: phpstorm-url-handler | Install shell script
  copy:
    src: phpstorm-url-handler
    dest: /usr/local/bin/phpstorm-url-handler

- name: phpstorm-url-handler | Install desktop file
  become: true
  shell: 'desktop-file-install "{{ role_path}}/files/phpstorm-url-handler.desktop" && update-desktop-database'

- name: JetBrains Toolbox | Import jaredhocutt.jetbrains_toolbox
  import_role:
    name: jaredhocutt.jetbrains_toolbox

- name: JetBrains Toolbox | Create symbolic link to binary
  file:
    src: '/home/{{ ansible_user }}/.local/share/JetBrains/Toolbox/bin/jetbrains-toolbox'
    dest: '/usr/local/bin/jetbrains-toolbox'
    state: link
